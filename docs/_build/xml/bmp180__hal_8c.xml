<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="bmp180__hal_8c" kind="file" language="C++">
    <compoundname>bmp180_hal.c</compoundname>
    <includes refid="bmp180__hal_8h" local="yes">bmp180_hal.h</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c</label>
        <link refid="bmp180__hal_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>bmp180_hal.h</label>
        <link refid="bmp180__hal_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>math.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="bmp180__hal_8c_1a2898c606f114bdbeecde57cf9ddbd7f5" prot="public" static="no">
        <name>BMP180_BIN_ADDRESS</name>
        <initializer>0b1110111</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="author"><para>Ceyhun Sen </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="8" column="9" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp180__hal_8c_1acf911c35c81cbcb255d48ff88944dcd7" prot="public" static="no">
        <name>BMP180_ADDRESS</name>
        <initializer>(BMP180_BIN_ADDRESS &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="9" column="9" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp180__hal_8c_1ae9b29e2ce42c93a62365b2a578c64bec" prot="public" static="no">
        <name>REGISTER_START</name>
        <initializer>0xAA</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="11" column="9" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp180__hal_8c_1ab0aa3e54cd2934b67b9882957456c391" prot="public" static="no">
        <name>CHIP_ID</name>
        <initializer>0xD0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="12" column="9" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp180__hal_8c_1a97de150e241b2dcae42ee841c4f54ca3" prot="public" static="no">
        <name>cnvrt8to16</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(((x) &lt;&lt; 8) | (y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="14" column="9" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp180__hal_8c_1a2766c9b72579fe88c4f337b4e007c8a7" prot="public" static="no">
        <name>powerof2</name>
        <param><defname>x</defname></param>
        <initializer>(1 &lt;&lt; (x))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="15" column="9" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="15" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bmp180__hal_8c_1a3ac0ea06ca9a26e1b1d68078053e6964" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>static int32_t BMP180_read_ut</definition>
        <argsstring>(I2C_HandleTypeDef *hi2cx, bmp180_t *bmp180)</argsstring>
        <name>BMP180_read_ut</name>
        <param>
          <type>I2C_HandleTypeDef *</type>
          <declname>hi2cx</declname>
        </param>
        <param>
          <type><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref> *</type>
          <declname>bmp180</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="77" column="16" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="77" bodyend="85" declfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" declline="17" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="bmp180__hal_8c_1afb1ffee3814d35ba3c7bcba66ce56d57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>static int32_t BMP180_read_up</definition>
        <argsstring>(I2C_HandleTypeDef *hi2cx, bmp180_t *bmp180)</argsstring>
        <name>BMP180_read_up</name>
        <param>
          <type>I2C_HandleTypeDef *</type>
          <declname>hi2cx</declname>
        </param>
        <param>
          <type><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref> *</type>
          <declname>bmp180</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="98" column="16" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="98" bodyend="123" declfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" declline="18" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="bmp180__hal_8c_1a1bf6d9e076ce7c192db6d1505463c2f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t BMP180_init</definition>
        <argsstring>(I2C_HandleTypeDef *hi2cx, bmp180_t *bmp180, uint8_t oss)</argsstring>
        <name>BMP180_init</name>
        <param>
          <type>I2C_HandleTypeDef *</type>
          <declname>hi2cx</declname>
        </param>
        <param>
          <type><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref> *</type>
          <declname>bmp180</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>oss</declname>
        </param>
        <briefdescription>
<para>Initialize callibration values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>on success, 1 on fail </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="25" column="9" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="25" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="bmp180__hal_8c_1af57a5c3bb77d11ebbbeb0b1be69cba62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMP180_get_all</definition>
        <argsstring>(I2C_HandleTypeDef *hi2cx, bmp180_t *bmp180)</argsstring>
        <name>BMP180_get_all</name>
        <param>
          <type>I2C_HandleTypeDef *</type>
          <declname>hi2cx</declname>
        </param>
        <param>
          <type><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref> *</type>
          <declname>bmp180</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="70" column="6" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="bmp180__hal_8c_1a030537d8895a417b4a75007a83fe20a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMP180_get_temperature</definition>
        <argsstring>(I2C_HandleTypeDef *hi2cx, bmp180_t *bmp180)</argsstring>
        <name>BMP180_get_temperature</name>
        <param>
          <type>I2C_HandleTypeDef *</type>
          <declname>hi2cx</declname>
        </param>
        <param>
          <type><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref> *</type>
          <declname>bmp180</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="87" column="6" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="87" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="bmp180__hal_8c_1a7bea00339ccf04f30f7cdbe423432b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMP180_get_pressure</definition>
        <argsstring>(I2C_HandleTypeDef *hi2cx, bmp180_t *bmp180)</argsstring>
        <name>BMP180_get_pressure</name>
        <param>
          <type>I2C_HandleTypeDef *</type>
          <declname>hi2cx</declname>
        </param>
        <param>
          <type><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref> *</type>
          <declname>bmp180</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="125" column="6" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="125" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="bmp180__hal_8c_1a105fd869b1733c68652c2c28b974d39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMP180_get_altitude</definition>
        <argsstring>(I2C_HandleTypeDef *hi2cx, bmp180_t *bmp180)</argsstring>
        <name>BMP180_get_altitude</name>
        <param>
          <type>I2C_HandleTypeDef *</type>
          <declname>hi2cx</declname>
        </param>
        <param>
          <type><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref> *</type>
          <declname>bmp180</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="151" column="6" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="bmp180__hal_8c_1a6ddcc66a416ca0d5cbbe4dacf3bc29b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BMP180_set_sea_pressure</definition>
        <argsstring>(I2C_HandleTypeDef *hi2cx, bmp180_t *bmp180, uint32_t sea_pressure)</argsstring>
        <name>BMP180_set_sea_pressure</name>
        <param>
          <type>I2C_HandleTypeDef *</type>
          <declname>hi2cx</declname>
        </param>
        <param>
          <type><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref> *</type>
          <declname>bmp180</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sea_pressure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" line="156" column="6" bodyfile="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c" bodystart="156" bodyend="159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;bmp180_hal.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP180_BIN_ADDRESS<sp/><sp/><sp/><sp/><sp/>0b1110111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP180_ADDRESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(BMP180_BIN_ADDRESS<sp/>&lt;&lt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_START<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xAA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHIP_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xD0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>cnvrt8to16(x,<sp/>y)<sp/>(((x)<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>powerof2(x)<sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>&lt;&lt;<sp/>(x))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t<sp/>BMP180_read_ut(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t<sp/>BMP180_read_up(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">uint8_t<sp/>BMP180_init(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180,<sp/>uint8_t<sp/>oss)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>device<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(HAL_I2C_IsDeviceReady(hi2cx,<sp/>BMP180_ADDRESS,<sp/>1,<sp/>HAL_MAX_DELAY)<sp/>!=<sp/>HAL_OK)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>buffer[22];</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>device<sp/>ID<sp/>is<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_I2C_Mem_Read(hi2cx,<sp/>BMP180_ADDRESS,<sp/>CHIP_ID,<sp/>1,<sp/>buffer,<sp/>1,<sp/>HAL_MAX_DELAY);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer[0]<sp/>!=<sp/>0x55)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_I2C_Mem_Read(hi2cx,<sp/>BMP180_ADDRESS,<sp/>REGISTER_START,<sp/>1,<sp/>buffer,<sp/>22,<sp/>HAL_MAX_DELAY);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>of<sp/>the<sp/>callibration<sp/>data<sp/>is<sp/>0x00<sp/>or<sp/>0xFF,<sp/>the<sp/>sensor<sp/>is<sp/>damaged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint8_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>22;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>combined_callibration_data<sp/>=<sp/>cnvrt8to16(buffer[i],<sp/>buffer[i<sp/>+<sp/>1]);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(combined_callibration_data<sp/>==<sp/>0x00<sp/>||<sp/>combined_callibration_data<sp/>==<sp/>0XFF)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;oss<sp/>=<sp/>oss;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;AC1<sp/>=<sp/>cnvrt8to16(buffer[0],<sp/><sp/>buffer[1]);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;AC2<sp/>=<sp/>cnvrt8to16(buffer[2],<sp/><sp/>buffer[3]);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;AC3<sp/>=<sp/>cnvrt8to16(buffer[4],<sp/><sp/>buffer[5]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;AC4<sp/>=<sp/>cnvrt8to16(buffer[6],<sp/><sp/>buffer[7]);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;AC5<sp/>=<sp/>cnvrt8to16(buffer[8],<sp/><sp/>buffer[9]);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;AC6<sp/>=<sp/>cnvrt8to16(buffer[10],<sp/>buffer[11]);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B1<sp/><sp/>=<sp/>cnvrt8to16(buffer[12],<sp/>buffer[13]);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B2<sp/><sp/>=<sp/>cnvrt8to16(buffer[14],<sp/>buffer[15]);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B3<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B4<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B5<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B6<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B7<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;MB<sp/><sp/>=<sp/>cnvrt8to16(buffer[16],<sp/>buffer[17]);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;MC<sp/><sp/>=<sp/>cnvrt8to16(buffer[18],<sp/>buffer[19]);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;MD<sp/><sp/>=<sp/>cnvrt8to16(buffer[20],<sp/>buffer[21]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;sea_pressure<sp/>=<sp/>101325;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BMP180_get_all(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>BMP180_get_temperature(hi2cx,<sp/>bmp180);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>BMP180_get_pressure(hi2cx,<sp/>bmp180);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>BMP180_get_altitude(hi2cx,<sp/>bmp180);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t<sp/>BMP180_read_ut(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>write_data<sp/>=<sp/>0x2E,<sp/>ut_data[2];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_I2C_Mem_Write(hi2cx,<sp/>BMP180_ADDRESS,<sp/>0xF4,<sp/>1,<sp/>&amp;write_data,<sp/>1,<sp/>HAL_MAX_DELAY);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_Delay(5);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_I2C_Mem_Read(hi2cx,<sp/>BMP180_ADDRESS,<sp/>0xF6,<sp/>1,<sp/>ut_data,<sp/>2,<sp/>HAL_MAX_DELAY);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(cnvrt8to16(ut_data[0],<sp/>ut_data[1]));</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BMP180_get_temperature(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>ut<sp/>=<sp/>BMP180_read_ut(hi2cx,<sp/>bmp180);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>X1,<sp/>X2;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>X1<sp/>=<sp/>(ut<sp/>-<sp/>bmp180-&gt;AC6)<sp/>*<sp/>bmp180-&gt;AC5<sp/>/<sp/>powerof2(15);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>X2<sp/>=<sp/>bmp180-&gt;MC<sp/>*<sp/>powerof2(11)<sp/>/<sp/>(X1<sp/>+<sp/>bmp180-&gt;MD);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B5<sp/>=<sp/>X1<sp/>+<sp/>X2;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;temperature<sp/>=<sp/>((bmp180-&gt;B5<sp/>+<sp/>8)<sp/>/<sp/>powerof2(4))<sp/>/<sp/>10.0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int32_t<sp/>BMP180_read_up(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>write_data<sp/>=<sp/>0x34<sp/>+<sp/>((bmp180-&gt;oss<sp/>&lt;&lt;<sp/>6)),<sp/>up_data[3];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_I2C_Mem_Write(hi2cx,<sp/>BMP180_ADDRESS,<sp/>0xF4,<sp/>1,<sp/>&amp;write_data,<sp/>1,<sp/>HAL_MAX_DELAY);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>wait<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(bmp180-&gt;oss)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait<sp/>=<sp/>26;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wait<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_Delay(wait);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>HAL_I2C_Mem_Read(hi2cx,<sp/>BMP180_ADDRESS,<sp/>0xF6,<sp/>1,<sp/>up_data,<sp/>3,<sp/>HAL_MAX_DELAY);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((up_data[0]<sp/>&lt;&lt;<sp/>16)<sp/>+<sp/>(up_data[1]<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>up_data[2])<sp/>&gt;&gt;<sp/>(8<sp/>-<sp/>bmp180-&gt;oss);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BMP180_get_pressure(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>X1,<sp/>X2,<sp/>X3,<sp/>up<sp/>=<sp/>BMP180_read_up(hi2cx,<sp/>bmp180),<sp/>p;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B6<sp/>=<sp/>bmp180-&gt;B5<sp/>-<sp/>4000;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>X1<sp/>=<sp/>(bmp180-&gt;B2<sp/>*<sp/>(bmp180-&gt;B6<sp/>*<sp/>bmp180-&gt;B6<sp/>/<sp/>powerof2(12)))<sp/>/<sp/>powerof2(11);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>X2<sp/>=<sp/>bmp180-&gt;AC2<sp/>*<sp/>bmp180-&gt;B6<sp/>/<sp/>powerof2(11);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>X3<sp/>=<sp/>X1<sp/>+<sp/>X2;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B3<sp/>=<sp/>(((bmp180-&gt;AC1<sp/>*<sp/>4<sp/>+<sp/>X3)<sp/>&lt;&lt;<sp/>bmp180-&gt;oss)<sp/>+<sp/>2)<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>X1<sp/>=<sp/>bmp180-&gt;AC3<sp/>*<sp/>bmp180-&gt;B6<sp/>/<sp/>powerof2(13);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>X2<sp/>=<sp/>(bmp180-&gt;B1<sp/>*<sp/>(bmp180-&gt;B6<sp/>*<sp/>bmp180-&gt;B6<sp/>/<sp/>powerof2(12)))<sp/>/<sp/>powerof2(16);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>X3<sp/>=<sp/>((X1<sp/>+<sp/>X2)<sp/>+<sp/>2)<sp/>/<sp/>powerof2(2);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B4<sp/>=<sp/>bmp180-&gt;AC4<sp/>*<sp/>(uint32_t)(X3<sp/>+<sp/>32768)<sp/>/<sp/>powerof2(15);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;B7<sp/>=<sp/>((uint32_t)up<sp/>-<sp/>bmp180-&gt;B3)<sp/>*<sp/>(50000<sp/>&gt;&gt;<sp/>bmp180-&gt;oss);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bmp180-&gt;B7<sp/>&lt;<sp/>0x80000000)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(bmp180-&gt;B7<sp/>*<sp/>2)<sp/>/<sp/>bmp180-&gt;B4;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(bmp180-&gt;B7<sp/>/<sp/>bmp180-&gt;B4)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>X1<sp/>=<sp/>(p<sp/>/<sp/>powerof2(8))<sp/>*<sp/>(p<sp/>/<sp/>powerof2(8));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>X1<sp/>=<sp/>(X1<sp/>*<sp/>3038)<sp/>/<sp/>powerof2(16);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>X2<sp/>=<sp/>(-7357<sp/>*<sp/>p)<sp/>/<sp/>powerof2(16);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>p<sp/>+<sp/>(X1<sp/>+<sp/>X2<sp/>+<sp/>3791)<sp/>/<sp/>powerof2(4);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;pressure<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BMP180_get_altitude(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;altitude<sp/>=<sp/>44330<sp/>*<sp/>(1<sp/>-<sp/>pow((bmp180-&gt;pressure<sp/>/<sp/>bmp180-&gt;sea_pressure),<sp/>1<sp/>/<sp/>5.255));</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BMP180_set_sea_pressure(I2C_HandleTypeDef<sp/>*hi2cx,<sp/><ref refid="structbmp180__t" kindref="compound">bmp180_t</ref><sp/>*bmp180,<sp/>uint32_t<sp/>sea_pressure)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp180-&gt;sea_pressure<sp/>=<sp/>sea_pressure;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ceyhunsen/Documents/projects/bmp180-stm32-driver/bmp180_hal.c"/>
  </compounddef>
</doxygen>
